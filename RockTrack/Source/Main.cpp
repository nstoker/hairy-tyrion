/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"

#include "RockTrack.h"
#include "Main.h"
#include "MainComponent.h"

//==============================================================================
class RockTrackApplication  : public JUCEApplication
{
public:
    //==============================================================================
    RockTrackApplication() {}
	~RockTrackApplication()
	{
		theLog.release();
		theLog = nullptr;
	}
    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }

    //==============================================================================
    void initialise (const String& /*commandLine*/) override
    {
        // This method is where you should put your application's initialisation code..

		// Setup the logging
		String subDirectory = getApplicationName();
		theLog = FileLogger::createDefaultAppLogger(subDirectory, getApplicationName() + ".log", getApplicationName() + TRANS(" version ") + getApplicationVersion() + TRANS(" starting"),32 * 1024);

		mainWindow = new MainWindow (getApplicationName());

		File dbPath = theLog->getLogFile().getParentDirectory().getChildFile(getApplicationName() + ".sqlite3");
		
		theLog->logMessage(TRANS("Local database in ") + dbPath.getFullPathName());

		rockTrackDB = new CDatabase();
		if (0 != rockTrackDB->connect(dbPath))
		{
			theLog->writeToLog(TRANS("Database error. Closing application."));
			//shutdown();
		}
    }

    void shutdown() override
    {
        // Add your application's shutdown code here..
		ScopedPointer<CDatabase> oldDB;		
		ScopedPointer<FileLogger> oldPointer;

		oldDB.swapWith(rockTrackDB);
		oldPointer.swapWith(theLog);
        mainWindow = nullptr; // (deletes our window)
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
	        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& /*commandLine*/) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }



private:
	ScopedPointer<MainWindow> mainWindow;
};


static ScopedPointer<ApplicationCommandManager> applicationCommandManager;

MainWindow::MainWindow(String name) : DocumentWindow(name,
	Colours::lightgrey,
	DocumentWindow::allButtons)
{
	setUsingNativeTitleBar(true);
	setContentOwned(new MainContentComponent(), true);

	centreWithSize(getWidth(), getHeight());
	setVisible(true);
}

void MainWindow::closeButtonPressed()
{
	// This is called when the user tries to close this window. Here, we'll just
	// ask the app to quit when this happens, but you can change this to do
	// whatever you need.
	JUCEApplication::getInstance()->systemRequestedQuit();
}

ApplicationCommandManager& MainWindow::getApplicationCommandManager()
{
	if (applicationCommandManager == nullptr)
		applicationCommandManager = new ApplicationCommandManager();

	return *applicationCommandManager;
}

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (RockTrackApplication)
